{"pageProps":{"post":{"author":{"_createdAt":"2023-01-20T23:21:59Z","_id":"c87c5c26-aeb7-4a10-812d-98cb53801f40","_rev":"Jbh3e9W2SIs3qJeiZBiBWQ","_type":"author","_updatedAt":"2023-01-20T23:21:59Z","bio":[{"_key":"db9c4c531c02","_type":"block","children":[{"_key":"f311882b8511","_type":"span","marks":[],"text":"Author and creator of this blog."}],"markDefs":[],"style":"normal"}],"image":{"_type":"image","asset":{"_ref":"image-4685b1085a6d182cb91a1d85fd6878a604694ee6-1355x1799-jpg","_type":"reference"}},"name":"Lucas Minter","slug":{"_type":"slug","current":"lucas-minter"}},"body":"These are my notes [Sam Julien](https://www.samjulien.com/)'s book Getting Started in Developer Relations. Sam is the Director of Developer Relations for Auth0, an instructor for egghead, and the author of Getting Started in Developer Relations.\nYou can buy that [book here](https://learn.samjulien.com/getting-started-in-developer-relations). \n\n## What is Developer Relations?\n\nWhat is DevRel? \n\nThe main task of developer relations is to build relationships with users\nand potential users, mediate between them and the company, and advocate for their best interests.\n\nWhat does this look like? \n\n1. Awareness. a synonym for marketing, but marketing to developers is somewhat of a  different angle than traditional marketing since developers by and large hate to be sold to.\n    - Awareness means letting people know about the product, including features, broad use cases, updates, a product roadmap, and anything else relevant to using it. A big focus here is on problems that the product solves.\n2. Education. Users and potential users need to know how to use the product, how to solve problems with it, and where to go for help.\n3. Feedback, also known as product advocacy or developer advocacy. \n    - One of the most critical goals of developer relations is to gather feedback from users and potential users. \n4. Community. Community is the chameleon of the bunch, as it can be part of developer relations, branched into its own department, or mixed in with customer support. \n    - community is the backbone of all dev rel. \n        - help solve problems, celebrating their successes (with and aside from the product, and empowering them to improve in their careers. \n        - **Lip service or inauthentic community pitches can be spotted a mile away**\n\nThere is an omission on this list: **sales.** Dev rel can lead to sales but it is not the primary directive. \n\n- **The neutrality of dev rel is critical here.** It has to be unmotivated by sales to keep clear judgment and explore feedback with an open mind.\n- Dev rel does have to provide its value to the organization if it's not based on pure revenue due to sales.\n\n \n\n## The Developer Advocate Job\n\nThe daily job of a developer advocate can vary widely, especially depending on team size. \n```\n9-10 am: Prepare talk for upcoming conference.\n10-10:30 am: Meet with content team for collaboration on GraphQL article.\n10:30 am-12 pm: Respond to DMs, Slack messages, and forum posts asking\nquestions about the product or talks and articles you've written.\n12-1 pm: Lunch (you've gotta eat!)\n1-1:30 pm: Meet with SDK team on feedback you've gotten from early access users.\n1:30-2:30 pm: Collaborative live stream with a compatible company on how\nyour products work together.\n2:30-4 pm: Work on new features for internal tooling.\n4-5 pm: Write quarterly report on conference and meetup impact.\n```\n\nWhile Traveling: \n\n```\n7-8 am: Meet with program participant (only overlap in time zones).\n8-9 am: Last minute slide tweaks and practicing.\n9 am: Speak at conference\n9:30-12 pm: Hang out in hallway answering questions from attendees.\n12-1 pm: Sit with conference attendees at lunch but forget to eat because\nyou're answering questions!\n1-3 pm: Sit in hallway answering DMs, messages, and forum posts but\npausing to say hi to people and answer questions.\n3-5 pm: Sneak back to hotel room to attend meetings with various teams\nand teammates.\n5-6 pm: Collapse for an hour to recharge.\n6-8 pm: Dinner with attendees and other speakers.\n8-...?: Hang out with attendees and other speakers.\n```\n\nSpeaking and listening:\n\n- Speaking: Awareness and Education\n    - This is largely content. Blog articles, recording tutorials, live streams, podcasts, conferences and meetups (in person or remote).\n    - Running or sponsoring events.\n- Listening: Community and Feedback\n    - Talking to event attendees, reading/responding to forum posts, managing forums, running incentive programs to empower developers in their own careers, working with the SDK(Software development kit) team on product feedback.\n    - This is the **supportive** part of the job.\n\n**Maintenance and logistics**\n\n- building and maintaining internal tools, wiring reports, documenting strategy, managing open source libraries or microsites, self-education.\n- Admin work, emails, paperwork\n\n**Do I need to switch jobs entirely to do dev rel?** \n\n- Well, how do you know you want a full-time job in dev rel?\n\n**The hidden treasure of your current job ( and the downsides of dev rel.**\n\n- First, your best learning comes from solving difficult problems and being forced to solve a difficult problem is the only way it gets done.\n    - Exposure to a lot of new concepts and patterns\n    - Solving difficult problems in less than ideal constraints\n    - All of your code could be obliterated, something all software devs need to learn one day.\n- Most of the time in dev rel you don't have the same level of forced problem-solving.\n- Second, it's entirely possible to do dev rel work as either part of your current job or on the side until you figure out if it's what you want to do.\n    - Start with some presentations for coworkers on relevant topics.\n    - After getting comfortable with that, search for local meetups to start giving talks.\n    - You can dip your toe into the waters without jumping straight into a full-time commitment.\n    \n\n**What Employers Look for in a Developer Advocate**\n\n- **dev rel is a new set of skills you can learn**\n- If you feel totally overwhelmed or like you suck at your job, this is not because something is wrong with you as a person — it's because you need to learn and practice a new set of skills!\n\n### What are the core character traits that you really need going into this?\n\n- First and foremost: **EMPATHY.**\n    - Empathy has to be there from day one.\n    - You HAVE to care about your community, users, and customers.\n    - We want \"That sucks!\" to be our first response.\n        - Empathize with the users. Understand their pain and acknowledge it.\n- Second: Love of learning\n    - You're going to learn a lot, like all the time.\n    - There's not a lot of comfortable bug fixing or familiar codebases lying around.\n- Third: You have to be able to manage several projects at once, sometimes in vastly different skill domains.\n    - Adding new features, writing/creating a new slide deck, recording tutorials, creating quarterly reports.\n- Fourth: You're a good communicator\n    - Can you convey info to others?\n    - good at teaching?\n    - Your preferred medium of communication is up to you.\n    - NOT EVERYONE HAS TO BE AN AWESOME WRITER OR KILLER SPEAKER, especially starting out.\n    - Do you listen to people, make them feel heard, and convey your ideas in a way that's easy to follow?\n\n### The Dev Rel Career Ladder\n\nThis is still being worked out. \n\nMary Thengvall's key areas are as such:\n\n1. Functional skills\n2. Delivery\n3. Teamwork\n4. Leadership\n- A Level 1 Dev Advocate can run the demo built by someone else on\nthe dev rel team.\n- Level 2 can build the demo.\n- Level 3 can design the demo.\n- Level 4 can coach the person designing, building, or running the\ndemo.\n\nSome good questions to ask during an interview: \n\n- How do you measure a developer advocate’s performance?\n- How does a developer advocate advance in their career here?\n- What opportunities for leadership or mentoring do you have here?\n- Do you have a career ladder for developer advocates (or do you plan on creating one)?\n\nHere’s the secret: don’t forget that in dev rel (as in most things in life), **you are the prize.**\n\n## Variations and Related Jobs in Dev Rel\n\nFor example, you might see positions that are solely in Community\n\nYou may also see content or product education jobs\n\n- These might be just writing or producing educational content.\n- Might be documentation, marking, or dev rel teams.\n- It could be solely a speaking role\n\nTechnical writing and product education can be entire careers in their own right.\n\n# III. Measuring Impact\n\n\"One of the most difficult things to do in Developer Relations is prove that the investment is worthwhile.\" - Mary Thengvall\n\n**This is one of the hardest problems in dev rel.** \n\n## How do you know if dev rel is doing a good job?\n\n## Impact: Measuring Dev Rel's ROI\n\nImpact is the total return on investment of dev rel work, measured both quantitatively and qualitatively. \n\n- How many people affect you and how you affected them.\n\nThe impact can mean: \n\n- Someone learned something from something you said or wrote\n- Someone bought something from you\n- You made someone's day\n- You recommended a tool or a resource that someone appreciated\n- You helped someone solve a problem\n\nWe need to measure negative impact as well. \n\nTake the inverse of each of the examples and remember to look out for those. \n\nExamples of quantitative measurements might be:\n\n- Views on a video\n- Attendees at a talk\n- Signups\n- Sales (sometimes called “conversions”) or revenue (note that it’s just one dimension of measurement here)\n- New followers on any number of platforms\n\n**\"You can be the smartest, most noble person in the world with the best product ever made, but you won't make an impact if you don't have a voice and an audience.\"**\n\nQualitative measurements are ways of describing the activities you’re doing and the feedback that you’re receiving.\n\n- Goodwill in the community. How liked/respected are you or the brand?\n- Meaningful conversations\n- Depth of relationships. This can be with users or with other members of the dev community.\n    - A good way to gauge depth is whether you'd feel comfortable asking each other for help with something.\n- Influence: The standard example of influence is always Apple: when they made the decision to remove disk drives from computers, the rest of the industry followed. It could be highly regarded members of the dev community ask for my opinion or ask to collaborate on content.\n- Technological area: Are you focusing all of your content in one area? Where are the questions coming from? Ruby? Django?\n\nWhat a report looks like after a work trip:\n\nQuantitative:\n\n- Number of attendees at each event\n- Number of new speaker/organizer/sponsor relationships\n- Number of new developer relationships\n- Signups (of any kind)\n\nQualitative:\n\n- Examples of deepened relationships\n- Examples of goodwill created\n- Examples of new opportunities created by this trip, whether speaking, co-marketing, collaboration, or anything else\n- Product feedback you received\n- Questions you were asked (and all of their qualities, such as which technology or feature they were about)\n\n## Using Impact Data\n\nIf you don't do anything with your measurements, it means nothing. \n\nUse your data to start to set goals that can be both quantitative and qualitative. \n\nIdentify trends and use those trends to improve your content and the product. For example:\n\n- Is a talk/article doing particularly well? Try creating more content along those same lines.\n- High number of questions on a feature? Check out the docs to make sure it's easy to understand or possible issues that may have been missed on GitHub.\n- Getting requests for content on a particular topic? Listen to your community and create something great!\n\n# IV. Building a Personal Dev Rel Strategy\n\nYou can use this in at least three different ways:\n\n1. To start building a body of work that you can take into an interview and talk intelligently about, including how you’ve measured success.\n2. To apply to your day job as a way of leveling up in your current company.\n3. To use as a basis for your personal content creation or “personal brand” (think of personal brand as your collective portfolio that you might use to get a job or consulting clients).\n\nDev rel and personal brand are really two sides of the same coin.\n\nWe’re going to go through five steps to building a personal dev rel strategy:\n\n1. Pick a tool or SaaS product that you absolutely love and that you feel has some level of credibility in the community.\n2. Dig into the wins, friction, and pain associated with this tool.\n3. Use that research to create a strategy around the four key areas of dev rel.\n4. Create content to support your strategy.\n5. Measure your impact and use the feedback to and improve\n\n## Step 1: Pick a product.\n\nWhat software tool or service that you absolutely could not live without? \n\n(first sentence of page 34 has a typo): \"it might a software product...\" should be \"It might be a software product...\"\n\nThe point of this exercise is to build experience, so you can always change your mind.\n\nOnce you’ve got a product or tool picked, it’s time to pretend that whatever company made that tool or service hired you to do developer relations for them.\n\n- What would you do?\n- What is your main goal?\n\n## Step 2: Wins, Friction, and Pain\n\nWe need to get in the heads of our users and understand how they view egghead.\n\n- Who uses egghead?\n- What issues are they having with installation and usage? Bugs?\n- What problems are they trying to solve by using egghead?\n- What's the onboarding experience like? How quickly can they go from \"what is egghead\" to \"wow this is cool!\"\n\nJust do your best and gather what you can from your own experience, forums, documentation, discussions you might be a part of or GitHub issues.\n\nSince this is a product you love, you could start by asking yourself similar\nquestions:\n\n- Why do I find this so indispensable?\n- Where do I get frustrated using this?\n- What would someone new to this tool find difficult? (Is there a steep learning curve for anything?)\n- How could this be even better?\n\n## Step 3: Use Your Research to Create a Strategy\n\nTo build your first strategy, you’re going to do the following:\n\n1. Pick one of the pain points or friction areas that you’ve found in your\nresearch.\n2. Come up with three different content ideas from different angles.\n3. Create and publish the smallest iteration of all three of them as fast\nas you can.\n4. Revise and improve on them over time.\n\n## Step 4: Create Content in Support of Your Strategy\n\nIt’s helpful to look at the issue from a variety of angles.\n\n- How do I solve the problem?\n- How can I avoid the problem entirely?\n- What’s the opposite of the problem?\n- What’s an example of where this problem matters?\n- What’s a real-world use case for solving this problem?\n- What other technologies might be commonly used when this problem is encountered?\n\n## Step 5: Measure Your Impact and Use the Feedback to Improve\n\nNow that you’ve got some content written out, you’ll want to define some quantitative and qualitative metrics to track.\n\n- Tweets\n- Likes\n- thumbs up\n- views\n- conversions\n- Sentiment/Perception: Tweets, emails, forum posts\n- Feedback\n\nIn all likelihood, your initial numbers might be pretty small or you might not be getting good data. That’s okay! That's valuable feedback you can use to improve. \n\n** Don’t stress too much about the results when you’re first getting started.\n\nNegative comments - \n\nDon’t respond when you’re in an emotional reaction!\n\nCool off and ask yourself some questions: \n\n- Who is this person?\n- Do they have a valid point, or are they just a troll?\n\nTake negative comments as data. See if there is validity to their point and something you can learn, and watch for trends. \n\nRespond with kindness! Sometimes people are just having a bad day. \n\n## Expanding Your Content: Tools in Your Dev Rel Tool Belt\n\nHere’s a rundown of where different types of content work:\n\n- Podcasts are personal.\n- Written tutorials are long-lived.\n- Conference talks in person can be huge for getting attention.\n- Small Meetups, whether in person or online, is the high level of engagement and interaction you can get.\n- Live streams are short-lived but great for community goodwill and relationships.\n- Video courses are fantastic for showing hands-on tutorials or explaining something in a way that documentation doesn't quite nail.\n\n## TAKE NOTES\n\nThink about how you might be able o improve in the next iteration. \n\nBlog about the process!\n\n# V. Skill Focus: Applying to Conferences\n\nGetting into speaking.\n\nempathy, persuasion, and persistence\n\n## Your Perspective is Valuable\n\nThe best technical speakers are not always the best engineers.\n\nSpeaking is about storytelling, emotion, and breaking down complex concepts.\n\nIs there a level of experience needed with your subject matter? Of course.\n\n- The audience can tell the difference between a junior and senior dev based on subject matter expertise.\n- If you’re a beginner, don’t sign up to give a talk on how you’re an expert at something. Frame the talk as a story about something really awesome you learned or an idea you had while figuring something out.\n- People *love* authenticity.\n\nThe more of an expert in something you become, the more you start to forget all of those quirks and rough edges that confused you as a beginner.\n\n## Speaking is (Another) Set of Skills You Can Learn\n\n## Crafting a CFP with Empathy\n\nCFP means “Call for Papers” or “Call for Proposals.” These usually include basic biographical information, a title, and a description of the talk (often referred to as an “abstract”).\n\nConferences want to sell tickets.\n\n- They want solid, educational, entertaining content\n\n### Vetting\n\n**“But wait, how can I be vetted if I’ve never given a talk before?”**\nThere are a number of ways you can do this. One way is to start giving talks at local meetups and recording yourself giving them.\n\nCommunity involvement. \n\n- Be public. Twitter, Gitter, StackOverflow, other forums.\n\nHow do I come up with a topic? \n\n- Many great speakers submit proposals on things they want to learn about but haven’t had the time or the opportunity yet.\n\n# VI. Four Strategies for Dev Rel Sanity\n\n- Writing a blog post\n- Answering questions on Twitter, Slack, Discord, or various Discourse forums\n- Making videos\n- Figuring out how to integrate a product with X language or Y framework\n- Building and improving programs\n- Collaborating with other companies on content\n- Streaming\n- Building a talk\n- Applying to events\n- Giving a talk (whether in person or online)\n- Appearing on a podcast\n- Working with the SDK team to provide developer feedback and improve the product\n\n## Strategy 1: Focus on shipping and improving instead of waiting for perfection.\n\nPerfection is the enemy of getting things done. \n\n*\"Perfectionism is the voice of the oppressor, the enemy of the people. It will keep you cramped and insane your whole life, and it is the main obstacle between you and a shitty first draft. I think perfectionism is based on the obsessive belief that if you run carefully enough, hitting each stepping-stone just right, you won't have to die. The truth is that you will die anyway and that a lot of people who aren't even looking at their feet are going to do a whole lot better than you, and have a lot more fun while they're doing it.\"*\n\n## Strategy 2: Don't try to automate too quickly.\n\n**Go slow now in order to go fast later.**\n\nI'm sure you know what I'm talking about: after six months or a year, you come back to the code you wrote and realize you can drastically simplify it. Why is that? It's because you know what's important and what's not due to experience.\n\n## Strategy 3: Repurpose content to prefer depth over breadth.\n\nOne of the best lessons I've learned so far is to use your content in multiple places. This can mean giving a talk multiple times, but it can also mean splicing and dicing that talk into blog articles, emails, videos, or anything else.\n\nI know some people are hesitant to re-use talks, but I think that goes away fast when you start doing dev rel full time.\n\n- The other thing I've noticed is that audience overlap is very rare, and even the few that see the same talk twice don't remember everything from the first time you gave it.\n- I'd much rather polish something repeatedly and give a really great version of a talk than keep testing out raw material. It's better for everyone.\n\nRemember: popularity is not the same as **impact**, which is your real goal.\n\nIf you look at the people who are truly at the top of this field, you'll notice that they do both: they are great at moving fast on popular topics, but they also genuinely provide deep knowledge and value.\n\n## Strategy 4: Increase throughput by fine-tuning your systems.\n\nWhat's throughput? It's the rate of production. You need to be able to move faster.\n\n- Optimization of your workflow and systems.\n\nHere are some examples of that I've done in the past:\n\n- Getting a better A/V setup (a mic stand, a better audio interface, fixing some resolution issues) in order to reduce the friction of recording videos. This also drastically reduces my editing time.\n- Adding a trackpad to the left of my keyboard to speed up editing.\n- Automating meeting notes creation with Shortcuts.\n- Rebuilding my personal site so that I can quickly write and publish articles that have a nice, accessible reading experience.\n- Using apps like Focus to block out distractions.\n\n# Bonus: 14 Quick Wins to Get Started Right Now\n\n```text\n1. Find your first CFP to apply to\n2. Write your first CFP\n3. Find a local meetup\n4. Contact the organizer of that meetup and ask about speaking\n5. Create the first slide of a talk you want to give\n6. Set up a Twitch or YouTube account (just sign up, don’t worry about\nanything else for today!)\n7. Sign up for a ready-made blog on something like [dev.to](http://dev.to/) or HashNode\n8. Install a note-taking app like Evernote or Notion to hold your dev rel\nnotes\n9. Set up ConvertKit or TinyLetter for building an email list\n10. Look at one forum post to use in your research\n11. Look at one GitHub issue to use in your research\n12. Make your first 30 second screencast\n13. If you don’t have any equipment for making videos, spend 15 minutes\nresearching a starter microphone\n14. Write down and publish something you’ve learned today, even if it’s\nonly a few sentences. You can always revise it later!\n```","publishedAt":"2023-01-21T22:34:00.000Z","slug":{"_type":"slug","current":"getting-started-in-develop-relations"},"title":"Getting Started in Develop Relations Notes"}},"__N_SSG":true}